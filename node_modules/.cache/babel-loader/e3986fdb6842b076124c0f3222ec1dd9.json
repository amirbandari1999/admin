{"ast":null,"code":"var _jsxFileName = \"/Users/davo/Desktop/admin/src/routes/privateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router';\nimport { isAuthenticated } from '../pages/utils';\nimport Sidebar from '../layouts/sidebar';\nimport CreateEventContext from '../context/createEventContext/createEventContext';\nimport EvaluationContext from '../context/evalaution/evaluationContext';\nimport SidebarSuperAdmin from '../layouts/sidebarSuperAdmin';\nimport { UseUserContext } from '../context/userContext/userContext';\nimport UsersApi from '../api/users';\nimport { UseSuperAdminContext } from '../context/superAdminContext/superAdminContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = () => {\n  _s();\n\n  const {\n    setRole,\n    role,\n    setUserData,\n    userId\n  } = UseUserContext();\n  const {\n    setIsLoadingSuperAdmin,\n    setRowsOfTable\n  } = UseSuperAdminContext();\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    setIsLoadingSuperAdmin(true);\n\n    if (userId && role) {\n      ;\n\n      (async () => {\n        if (role !== 2) {\n          const response2 = await UsersApi.userList(userId);\n\n          if (response2.status === 200) {\n            setRole(response2.data.role);\n            setUserData(response2.data);\n\n            if (!location.pathname) {\n              navigate('/events');\n            }\n          }\n        } else {\n          const response2 = await UsersApi.getSuperAdminUser(userId);\n\n          if (response2.status === 200) {\n            setRole(response2.data.role);\n            setUserData(response2.data);\n            const response3 = await UsersApi.getAccounts();\n            setRowsOfTable(response3.data);\n\n            if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n              navigate('/super-admin');\n            }\n          }\n        }\n      })();\n    }\n\n    setIsLoadingSuperAdmin(false);\n  }, [userId, role]);\n\n  if (isAuthenticated()) {\n    if (role === 2) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SidebarSuperAdmin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EvaluationContext, {\n        children: /*#__PURE__*/_jsxDEV(CreateEventContext, {\n          children: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/sign-in\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PrivateRoute, \"gMsdikdDs1f1NUVrv3Ag60oK04k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/davo/Desktop/admin/src/routes/privateRoute.tsx"],"names":["React","useEffect","Navigate","Outlet","useLocation","useNavigate","isAuthenticated","Sidebar","CreateEventContext","EvaluationContext","SidebarSuperAdmin","UseUserContext","UsersApi","UseSuperAdminContext","PrivateRoute","setRole","role","setUserData","userId","setIsLoadingSuperAdmin","setRowsOfTable","navigate","location","response2","userList","status","data","pathname","getSuperAdminUser","response3","getAccounts"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport {Navigate, Outlet, useLocation} from 'react-router-dom'\nimport {useNavigate} from 'react-router'\nimport {isAuthenticated} from '../pages/utils'\nimport Sidebar from '../layouts/sidebar'\nimport CreateEventContext from '../context/createEventContext/createEventContext'\nimport EvaluationContext from '../context/evalaution/evaluationContext'\nimport SidebarSuperAdmin from '../layouts/sidebarSuperAdmin'\nimport {UseUserContext} from '../context/userContext/userContext'\nimport {IUserProps} from '../context/userContext/userContext.props'\nimport UsersApi from '../api/users'\nimport {UseSuperAdminContext} from '../context/superAdminContext/superAdminContext'\nimport {ISuperAdminProps} from '../context/superAdminContext/superAdminContext.props'\n\nconst PrivateRoute = () => {\n  const {setRole, role, setUserData, userId} = UseUserContext() as IUserProps\n  const {setIsLoadingSuperAdmin, setRowsOfTable} = UseSuperAdminContext() as ISuperAdminProps\n  const navigate = useNavigate()\n  const location = useLocation()\n\n  useEffect(() => {\n    setIsLoadingSuperAdmin(true)\n    if (userId && role) {\n      ;(async () => {\n        if (role !== 2) {\n          const response2 = await UsersApi.userList(userId)\n          if (response2.status === 200) {\n            setRole(response2.data.role)\n            setUserData(response2.data)\n            if (!location.pathname) {\n              navigate('/events')\n            }\n          }\n        } else {\n          const response2 = await UsersApi.getSuperAdminUser(userId)\n          if (response2.status === 200) {\n            setRole(response2.data.role)\n            setUserData(response2.data)\n            const response3 = await UsersApi.getAccounts()\n            setRowsOfTable(response3.data)\n            if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n              navigate('/super-admin')\n            }\n          }\n        }\n      })()\n    }\n    setIsLoadingSuperAdmin(false)\n  }, [userId, role])\n\n  if (isAuthenticated()) {\n    if (role === 2) {\n      return (\n        <>\n          <SidebarSuperAdmin />\n          <Outlet />\n        </>\n      )\n    }\n    return (\n      <>\n        <Sidebar />\n        <EvaluationContext>\n          <CreateEventContext>\n            <Outlet />\n          </CreateEventContext>\n        </EvaluationContext>\n      </>\n    )\n  }\n  return <Navigate to=\"/sign-in\" />\n}\n\nexport default PrivateRoute\n"]},"metadata":{},"sourceType":"module"}