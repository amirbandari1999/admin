{"ast":null,"code":"import axios from '../axios'; // TODO: Finish this endpoint\n\nconst filterEvaluations = async (adminId, eventId, questionId, evaluatorId, evaluateeId) => {\n  const data = await axios.get(`Evaluation/filterEvaluations/${adminId}/${eventId}/${questionId}/${evaluatorId}/${evaluateeId}`);\n  return data;\n}; // TODO: Finish this endpoint\n\n\nconst getEvaluationsList = async () => {\n  const data = await axios.get(`Evaluation/getEvaluations`);\n  return data;\n}; // TODO: Finish this endpoint\n\n\nconst getEvaluationList = async id => {\n  const data = await axios.get(`Evaluation/getEvaluation/${id}`);\n  return data;\n}; // TODO: Finish this endpoint\n\n\nconst createEvaluation = async () => {\n  await axios.post('Evaluation/createEvaluation');\n}; // TODO: Finish this endpoint\n\n\nconst updateEvaluation = async id => {\n  await axios.put(`Evaluation/updateEvaluation/${id}`);\n}; // TODO: Finish this endpoint\n\n\nconst deleteEvaluation = async id => {\n  await axios.delete(`Evaluation/deleteEvaluation/${id}`);\n};\n\nconst getEventForEvaluation = (userToken, eventToken) => axios.get(`Evaluation/getEventForEvaluation/${userToken}/${eventToken}`);\n\nconst getQuestionGroups = (userToken, eventToken) => axios.get(`Evaluation/getQuestionGrops/${userToken}/${eventToken}`);\n\nconst saveQuestionGroups = data => axios.post(`Evaluation/saveEvaluationArr`, data);\n\nconst EvaluationApi = {\n  filterEvaluations,\n  getEvaluationsList,\n  getEvaluationList,\n  createEvaluation,\n  updateEvaluation,\n  deleteEvaluation,\n  getEventForEvaluation,\n  getQuestionGroups,\n  saveQuestionGroups\n};\nexport default EvaluationApi;","map":{"version":3,"sources":["/Users/davo/Desktop/admin/src/api/evaluation.ts"],"names":["axios","filterEvaluations","adminId","eventId","questionId","evaluatorId","evaluateeId","data","get","getEvaluationsList","getEvaluationList","id","createEvaluation","post","updateEvaluation","put","deleteEvaluation","delete","getEventForEvaluation","userToken","eventToken","getQuestionGroups","saveQuestionGroups","EvaluationApi"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,OACxBC,OADwB,EAExBC,OAFwB,EAGxBC,UAHwB,EAIxBC,WAJwB,EAKxBC,WALwB,KAMrB;AACH,QAAMC,IAAI,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAChB,gCAA+BN,OAAQ,IAAGC,OAAQ,IAAGC,UAAW,IAAGC,WAAY,IAAGC,WAAY,EAD9E,CAAnB;AAGA,SAAOC,IAAP;AACD,CAXD,C,CAaA;;;AACA,MAAME,kBAAkB,GAAG,YAAY;AACrC,QAAMF,IAAI,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAW,2BAAX,CAAnB;AACA,SAAOD,IAAP;AACD,CAHD,C,CAKA;;;AACA,MAAMG,iBAAiB,GAAG,MAAOC,EAAP,IAAsB;AAC9C,QAAMJ,IAAI,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAW,4BAA2BG,EAAG,EAAzC,CAAnB;AACA,SAAOJ,IAAP;AACD,CAHD,C,CAKA;;;AACA,MAAMK,gBAAgB,GAAG,YAAY;AACnC,QAAMZ,KAAK,CAACa,IAAN,CAAW,6BAAX,CAAN;AACD,CAFD,C,CAIA;;;AACA,MAAMC,gBAAgB,GAAG,MAAOH,EAAP,IAAsB;AAC7C,QAAMX,KAAK,CAACe,GAAN,CAAW,+BAA8BJ,EAAG,EAA5C,CAAN;AACD,CAFD,C,CAIA;;;AACA,MAAMK,gBAAgB,GAAG,MAAOL,EAAP,IAAsB;AAC7C,QAAMX,KAAK,CAACiB,MAAN,CAAc,+BAA8BN,EAAG,EAA/C,CAAN;AACD,CAFD;;AAIA,MAAMO,qBAAqB,GAAG,CAACC,SAAD,EAAoBC,UAApB,KAC5BpB,KAAK,CAACQ,GAAN,CAAW,oCAAmCW,SAAU,IAAGC,UAAW,EAAtE,CADF;;AAEA,MAAMC,iBAAiB,GAAG,CAACF,SAAD,EAAoBC,UAApB,KACxBpB,KAAK,CAACQ,GAAN,CAAW,+BAA8BW,SAAU,IAAGC,UAAW,EAAjE,CADF;;AAEA,MAAME,kBAAkB,GAAIf,IAAD,IAUrBP,KAAK,CAACa,IAAN,CAAY,8BAAZ,EAA2CN,IAA3C,CAVN;;AAYA,MAAMgB,aAAa,GAAG;AACpBtB,EAAAA,iBADoB;AAEpBQ,EAAAA,kBAFoB;AAGpBC,EAAAA,iBAHoB;AAIpBE,EAAAA,gBAJoB;AAKpBE,EAAAA,gBALoB;AAMpBE,EAAAA,gBANoB;AAOpBE,EAAAA,qBAPoB;AAQpBG,EAAAA,iBARoB;AASpBC,EAAAA;AAToB,CAAtB;AAYA,eAAeC,aAAf","sourcesContent":["import axios from '../axios'\n\n// TODO: Finish this endpoint\nconst filterEvaluations = async (\n  adminId: undefined | number,\n  eventId: undefined | number,\n  questionId: undefined | number,\n  evaluatorId: undefined | number,\n  evaluateeId: undefined | number,\n) => {\n  const data = await axios.get(\n    `Evaluation/filterEvaluations/${adminId}/${eventId}/${questionId}/${evaluatorId}/${evaluateeId}`,\n  )\n  return data\n}\n\n// TODO: Finish this endpoint\nconst getEvaluationsList = async () => {\n  const data = await axios.get(`Evaluation/getEvaluations`)\n  return data\n}\n\n// TODO: Finish this endpoint\nconst getEvaluationList = async (id: number) => {\n  const data = await axios.get(`Evaluation/getEvaluation/${id}`)\n  return data\n}\n\n// TODO: Finish this endpoint\nconst createEvaluation = async () => {\n  await axios.post('Evaluation/createEvaluation')\n}\n\n// TODO: Finish this endpoint\nconst updateEvaluation = async (id: number) => {\n  await axios.put(`Evaluation/updateEvaluation/${id}`)\n}\n\n// TODO: Finish this endpoint\nconst deleteEvaluation = async (id: number) => {\n  await axios.delete(`Evaluation/deleteEvaluation/${id}`)\n}\n\nconst getEventForEvaluation = (userToken: string, eventToken: string) =>\n  axios.get(`Evaluation/getEventForEvaluation/${userToken}/${eventToken}`)\nconst getQuestionGroups = (userToken: string, eventToken: string) =>\n  axios.get(`Evaluation/getQuestionGrops/${userToken}/${eventToken}`)\nconst saveQuestionGroups = (data: {\n  eventToken: string\n  userToken: string\n  evaluatorId: number\n  evaluateeId: number | undefined\n  questionPointArr: {\n    questionId: number\n    point?: number\n    evaluationText: string | undefined\n  }[]\n}) => axios.post(`Evaluation/saveEvaluationArr`, data)\n\nconst EvaluationApi = {\n  filterEvaluations,\n  getEvaluationsList,\n  getEvaluationList,\n  createEvaluation,\n  updateEvaluation,\n  deleteEvaluation,\n  getEventForEvaluation,\n  getQuestionGroups,\n  saveQuestionGroups,\n}\n\nexport default EvaluationApi\n"]},"metadata":{},"sourceType":"module"}