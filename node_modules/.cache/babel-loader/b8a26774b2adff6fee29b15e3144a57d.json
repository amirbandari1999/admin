{"ast":null,"code":"var _jsxFileName = \"/Users/davo/Desktop/admin/src/pages/evaluatorsStep/evaluatorsSteps.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Box, TextField } from '@mui/material';\nimport SelectButton from '../../layouts/selectButton';\nimport SelectButtonWithText from '../../layouts/selectButtonWithText';\nimport MakeStyles from '../../assets/makeStyles/makeStyles';\nimport { UseEvaluationContext } from '../../context/evalaution/evaluationContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EvaluatorsSteps = _ref => {\n  _s();\n\n  let {\n    setBlockedNext,\n    ratePointFrom,\n    ratePointTo,\n    questionAnswers,\n    markWithText,\n    questions,\n    setQuestionAnswers,\n    setFeedbackOfQuestion,\n    title\n  } = _ref;\n  const classes = MakeStyles();\n  const {\n    scorings\n  } = UseEvaluationContext();\n  useEffect(() => {\n    const filterQuestionAnswers = Object.entries(questionAnswers).filter(item => questions.find(item2 => Number(item[0]) === Number(item2.id)));\n    const findUnselectedQuestions = filterQuestionAnswers.find(item => !item[1]);\n\n    if (findUnselectedQuestions) {\n      setBlockedNext(true);\n    } else {\n      setBlockedNext(false);\n    }\n  }, [questionAnswers]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"evaluators-step-rating-heading\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: \"font-weight-600 font-size-16 color-dark-blue\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"evaluators-step-rating-body\",\n      children: questions.map(questionsData => /*#__PURE__*/_jsxDEV(Box, {\n        className: \"mt-52 width-100\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: \"font-weight-700 color-dark-blue font-size-16 line-height-22\",\n          children: questionsData.questionTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"font-weight-500 color-dark-blue font-size-16 mt-10 line-height-22\",\n          children: questionsData.questionDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"question-container\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              className: \"mt-14\",\n              children: markWithText ? /*#__PURE__*/_jsxDEV(SelectButtonWithText, {\n                scorings: scorings,\n                disabled: false,\n                point: questionAnswers[questionsData.id],\n                onChange: rating => setQuestionAnswers(questionsData.id, rating)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(SelectButton, {\n                disabled: false,\n                point: questionAnswers[questionsData.id],\n                onChange: rating => setQuestionAnswers(questionsData.id, rating),\n                ratePointFrom: ratePointFrom,\n                ratePointTo: ratePointTo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), !markWithText && /*#__PURE__*/_jsxDEV(Box, {\n              className: \"mt-10 mb-10 font-size-13 color-light-gray2 font-weight-400 line-height-12 align-center d-flex justify-between\",\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                children: \"Not at all\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                className: \"ml-10 \",\n                children: \"Excellent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), questionsData.applyQuestionDescription && /*#__PURE__*/_jsxDEV(Box, {\n          className: \"question-feedback mt-20 width-100\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: \"mb-10 font-weight-400 font-size-16\",\n            children: \"Add Feedback\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"standard-multiline-flexible\",\n            multiline: true,\n            maxRows: 4,\n            fullWidth: true,\n            onChange: e => setFeedbackOfQuestion(questionsData.id, e.target.value),\n            className: `${classes.textFieldFeedback}`,\n            label: \"Feedback\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)]\n      }, questionsData.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EvaluatorsSteps, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EvaluatorsSteps;\nexport default EvaluatorsSteps;\n\nvar _c;\n\n$RefreshReg$(_c, \"EvaluatorsSteps\");","map":{"version":3,"sources":["/Users/davo/Desktop/admin/src/pages/evaluatorsStep/evaluatorsSteps.tsx"],"names":["React","useEffect","Box","TextField","SelectButton","SelectButtonWithText","MakeStyles","UseEvaluationContext","EvaluatorsSteps","setBlockedNext","ratePointFrom","ratePointTo","questionAnswers","markWithText","questions","setQuestionAnswers","setFeedbackOfQuestion","title","classes","scorings","filterQuestionAnswers","Object","entries","filter","item","find","item2","Number","id","findUnselectedQuestions","map","questionsData","questionTitle","questionDescription","rating","applyQuestionDescription","e","target","value","textFieldFeedback"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport {Box, TextField} from '@mui/material'\nimport SelectButton from '../../layouts/selectButton'\nimport {IQuestion} from '../../interfaces/evaulateEvent'\nimport SelectButtonWithText from '../../layouts/selectButtonWithText'\nimport MakeStyles from '../../assets/makeStyles/makeStyles'\nimport {UseEvaluationContext} from '../../context/evalaution/evaluationContext'\nimport {IEvalautionProps} from '../../context/evalaution/evaluationContext.props'\n\nconst EvaluatorsSteps = ({\n  setBlockedNext,\n  ratePointFrom,\n  ratePointTo,\n  questionAnswers,\n  markWithText,\n  questions,\n  setQuestionAnswers,\n  setFeedbackOfQuestion,\n  title,\n}: {\n  setBlockedNext: (value: boolean) => void\n  ratePointFrom: number\n  ratePointTo: number\n  questionAnswers: {[k: number]: number}\n  markWithText: boolean\n  questions: IQuestion[]\n  setQuestionAnswers: (questionId: number, questionValue: number) => void\n  setFeedbackOfQuestion: (questionId: number, feedbackValue: string) => void\n  title: string\n}) => {\n  const classes = MakeStyles()\n  const {scorings} = UseEvaluationContext() as IEvalautionProps\n\n  useEffect(() => {\n    const filterQuestionAnswers = Object.entries(questionAnswers).filter((item) =>\n      questions.find((item2) => Number(item[0]) === Number(item2.id)),\n    )\n    const findUnselectedQuestions = filterQuestionAnswers.find((item) => !item[1])\n\n    if (findUnselectedQuestions) {\n      setBlockedNext(true)\n    } else {\n      setBlockedNext(false)\n    }\n  }, [questionAnswers])\n\n  return (\n    <Box>\n      <Box className=\"evaluators-step-rating-heading\">\n        <Box className=\"font-weight-600 font-size-16 color-dark-blue\">{title}</Box>\n        {/*<Box className=\"mt-12 font-weight-300 font-size-13 line-height-14  color-dark-blue\">*/}\n        {/*  Read the filters and add the rating for the evaluatee*/}\n        {/*</Box>*/}\n      </Box>\n      <Box className=\"evaluators-step-rating-body\">\n        {questions.map((questionsData) => (\n          <Box className=\"mt-52 width-100\" key={questionsData.id}>\n            <Box className=\"font-weight-700 color-dark-blue font-size-16 line-height-22\">\n              {questionsData.questionTitle}\n            </Box>\n            <Box className=\"font-weight-500 color-dark-blue font-size-16 mt-10 line-height-22\">\n              {questionsData.questionDescription}\n            </Box>\n            <Box className=\"question-container\">\n              <Box>\n                <Box className=\"mt-14\">\n                  {markWithText ? (\n                    <SelectButtonWithText\n                      scorings={scorings}\n                      disabled={false}\n                      point={questionAnswers[questionsData.id]}\n                      onChange={(rating) => setQuestionAnswers(questionsData.id, rating)}\n                    />\n                  ) : (\n                    <SelectButton\n                      disabled={false}\n                      point={questionAnswers[questionsData.id]}\n                      onChange={(rating) => setQuestionAnswers(questionsData.id, rating)}\n                      ratePointFrom={ratePointFrom}\n                      ratePointTo={ratePointTo}\n                    />\n                  )}\n                </Box>\n                {!markWithText && (\n                  <Box className=\"mt-10 mb-10 font-size-13 color-light-gray2 font-weight-400 line-height-12 align-center d-flex justify-between\">\n                    <Box>Not at all</Box>\n                    <Box className=\"ml-10 \">Excellent</Box>\n                  </Box>\n                )}\n              </Box>\n            </Box>\n            {questionsData.applyQuestionDescription && (\n              <Box className=\"question-feedback mt-20 width-100\">\n                <Box className=\"mb-10 font-weight-400 font-size-16\">Add Feedback</Box>\n                <TextField\n                  id=\"standard-multiline-flexible\"\n                  multiline\n                  maxRows={4}\n                  fullWidth\n                  onChange={(e) => setFeedbackOfQuestion(questionsData.id, e.target.value)}\n                  className={`${classes.textFieldFeedback}`}\n                  label=\"Feedback\"\n                />\n              </Box>\n            )}\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  )\n}\n\nexport default EvaluatorsSteps\n"]},"metadata":{},"sourceType":"module"}