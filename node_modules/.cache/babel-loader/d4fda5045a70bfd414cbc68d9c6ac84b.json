{"ast":null,"code":"var _jsxFileName = \"/Users/davo/Desktop/admin/src/routes/publicRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { useLocation, useNavigate } from 'react-router';\nimport { isAuthenticated } from '../pages/utils';\nimport RateSidebar from '../layouts/rateEvaluateSidebar';\nimport FeedbackContext from '../context/feedbackContext/feedbackContext';\nimport EvaluationContext from '../context/evalaution/evaluationContext';\nimport { UseUserContext } from '../context/userContext/userContext';\nimport UsersApi from '../api/users';\nimport { UseSuperAdminContext } from '../context/superAdminContext/superAdminContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PublicRoute = () => {\n  _s();\n\n  const {\n    setRole,\n    role,\n    userData,\n    setUserData,\n    userId,\n    setIsLoadingPage\n  } = UseUserContext();\n  const location = useLocation();\n  const {\n    setIsLoadingSuperAdmin,\n    setRowsOfTable\n  } = UseSuperAdminContext();\n  const navigate = useNavigate();\n  useEffect(() => {\n    setIsLoadingSuperAdmin(true);\n\n    if (localStorage.getItem('userId') && role && !userData) {\n      ;\n\n      (async () => {\n        if (role !== 2) {\n          const response2 = await UsersApi.userList(userId);\n\n          if (response2.status === 200) {\n            setRole(response2.data.role);\n            setUserData(response2.data);\n\n            if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n              navigate('/events');\n            }\n          }\n        } else {\n          const response2 = await UsersApi.getSuperAdminUser(userId);\n\n          if (response2.status === 200) {\n            setRole(response2.data.role);\n            setUserData(response2.data);\n            const response3 = await UsersApi.getAccounts();\n            setRowsOfTable(response3.data);\n\n            if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n              navigate('/super-admin');\n            }\n          }\n        }\n      })();\n\n      setIsLoadingSuperAdmin(false);\n    }\n\n    setIsLoadingPage(false);\n  }, [userId, role]);\n\n  if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n    if (!isAuthenticated()) {\n      return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(EvaluationContext, {\n    children: /*#__PURE__*/_jsxDEV(FeedbackContext, {\n      children: [/*#__PURE__*/_jsxDEV(RateSidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PublicRoute, \"fPjCxODVr6jVvib6o2c9VLE4s84=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = PublicRoute;\nexport default PublicRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"sources":["/Users/davo/Desktop/admin/src/routes/publicRoute.tsx"],"names":["React","useEffect","Navigate","Outlet","useLocation","useNavigate","isAuthenticated","RateSidebar","FeedbackContext","EvaluationContext","UseUserContext","UsersApi","UseSuperAdminContext","PublicRoute","setRole","role","userData","setUserData","userId","setIsLoadingPage","location","setIsLoadingSuperAdmin","setRowsOfTable","navigate","localStorage","getItem","response2","userList","status","data","pathname","getSuperAdminUser","response3","getAccounts"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,EAAkBC,MAAlB,QAA+B,kBAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,cAAvC;AACA,SAAQC,eAAR,QAA8B,gBAA9B;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,SAAQC,cAAR,QAA6B,oCAA7B;AAEA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAAQC,oBAAR,QAAmC,gDAAnC;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA,WAA1B;AAAuCC,IAAAA,MAAvC;AAA+CC,IAAAA;AAA/C,MACJT,cAAc,EADhB;AAEA,QAAMU,QAAQ,GAAGhB,WAAW,EAA5B;AACA,QAAM;AAACiB,IAAAA,sBAAD;AAAyBC,IAAAA;AAAzB,MAA2CV,oBAAoB,EAArE;AACA,QAAMW,QAAQ,GAAGlB,WAAW,EAA5B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;;AACA,QAAIG,YAAY,CAACC,OAAb,CAAqB,QAArB,KAAkCV,IAAlC,IAA0C,CAACC,QAA/C,EAAyD;AACvD;;AAAC,OAAC,YAAY;AACZ,YAAID,IAAI,KAAK,CAAb,EAAgB;AACd,gBAAMW,SAAS,GAAG,MAAMf,QAAQ,CAACgB,QAAT,CAAkBT,MAAlB,CAAxB;;AACA,cAAIQ,SAAS,CAACE,MAAV,KAAqB,GAAzB,EAA8B;AAC5Bd,YAAAA,OAAO,CAACY,SAAS,CAACG,IAAV,CAAed,IAAhB,CAAP;AACAE,YAAAA,WAAW,CAACS,SAAS,CAACG,IAAX,CAAX;;AACA,gBAAIT,QAAQ,CAACU,QAAT,KAAsB,mCAA1B,EAA+D;AAC7DP,cAAAA,QAAQ,CAAC,SAAD,CAAR;AACD;AACF;AACF,SATD,MASO;AACL,gBAAMG,SAAS,GAAG,MAAMf,QAAQ,CAACoB,iBAAT,CAA2Bb,MAA3B,CAAxB;;AACA,cAAIQ,SAAS,CAACE,MAAV,KAAqB,GAAzB,EAA8B;AAC5Bd,YAAAA,OAAO,CAACY,SAAS,CAACG,IAAV,CAAed,IAAhB,CAAP;AACAE,YAAAA,WAAW,CAACS,SAAS,CAACG,IAAX,CAAX;AACA,kBAAMG,SAAS,GAAG,MAAMrB,QAAQ,CAACsB,WAAT,EAAxB;AACAX,YAAAA,cAAc,CAACU,SAAS,CAACH,IAAX,CAAd;;AACA,gBAAIT,QAAQ,CAACU,QAAT,KAAsB,mCAA1B,EAA+D;AAC7DP,cAAAA,QAAQ,CAAC,cAAD,CAAR;AACD;AACF;AACF;AACF,OAtBA;;AAuBDF,MAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD;;AACDF,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GA7BQ,EA6BN,CAACD,MAAD,EAASH,IAAT,CA7BM,CAAT;;AA+BA,MAAIK,QAAQ,CAACU,QAAT,KAAsB,mCAA1B,EAA+D;AAC7D,QAAI,CAACxB,eAAe,EAApB,EAAwB;AACtB,0BAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,iBAAD;AAAA,2BACE,QAAC,eAAD;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApDD;;GAAMO,W;UAGaT,W,EAEAC,W;;;KALbQ,W;AAsDN,eAAeA,WAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport {Navigate, Outlet} from 'react-router-dom'\nimport {useLocation, useNavigate} from 'react-router'\nimport {isAuthenticated} from '../pages/utils'\nimport RateSidebar from '../layouts/rateEvaluateSidebar'\nimport FeedbackContext from '../context/feedbackContext/feedbackContext'\nimport EvaluationContext from '../context/evalaution/evaluationContext'\nimport {UseUserContext} from '../context/userContext/userContext'\nimport {IUserProps} from '../context/userContext/userContext.props'\nimport UsersApi from '../api/users'\nimport {UseSuperAdminContext} from '../context/superAdminContext/superAdminContext'\nimport {ISuperAdminProps} from '../context/superAdminContext/superAdminContext.props'\n\nconst PublicRoute = () => {\n  const {setRole, role, userData, setUserData, userId, setIsLoadingPage} =\n    UseUserContext() as IUserProps\n  const location = useLocation()\n  const {setIsLoadingSuperAdmin, setRowsOfTable} = UseSuperAdminContext() as ISuperAdminProps\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    setIsLoadingSuperAdmin(true)\n    if (localStorage.getItem('userId') && role && !userData) {\n      ;(async () => {\n        if (role !== 2) {\n          const response2 = await UsersApi.userList(userId)\n          if (response2.status === 200) {\n            setRole(response2.data.role)\n            setUserData(response2.data)\n            if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n              navigate('/events')\n            }\n          }\n        } else {\n          const response2 = await UsersApi.getSuperAdminUser(userId)\n          if (response2.status === 200) {\n            setRole(response2.data.role)\n            setUserData(response2.data)\n            const response3 = await UsersApi.getAccounts()\n            setRowsOfTable(response3.data)\n            if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n              navigate('/super-admin')\n            }\n          }\n        }\n      })()\n      setIsLoadingSuperAdmin(false)\n    }\n    setIsLoadingPage(false)\n  }, [userId, role])\n\n  if (location.pathname !== '/Evaluation/getEventForEvaluation') {\n    if (!isAuthenticated()) {\n      return <Outlet />\n    }\n    return <Navigate to=\"/events\" />\n  }\n  return (\n    <EvaluationContext>\n      <FeedbackContext>\n        <RateSidebar />\n        <Outlet />\n      </FeedbackContext>\n    </EvaluationContext>\n  )\n}\n\nexport default PublicRoute\n"]},"metadata":{},"sourceType":"module"}