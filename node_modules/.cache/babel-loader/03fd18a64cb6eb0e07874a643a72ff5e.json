{"ast":null,"code":"import axios from '../axios';\n\nconst getQuestionsGroups = async () => {\n  const data = await axios.get('Question/getQuestionGroups');\n  return data;\n};\n\nconst getQuestionGroup = async id => {\n  const data = await axios.get(`Question/getQuestionGroup/${id}`);\n  return data;\n};\n\nconst getTemplates = async () => {\n  const response = await axios.get(`Question/getTemplates`);\n  return response;\n}; // TODO: Finish this endpoint\n\n\nconst getQuestionsList = async () => {\n  const data = await axios.get('Question/getQuestions');\n  return data;\n}; // TODO: Finish this endpoint\n\n\nconst getQuestionsByAdminList = async adminId => {\n  const data = await axios.get(`Question/getQuestionsByAdmin/${adminId}`);\n  return data;\n}; // TODO: Finish this endpoint\n\n\nconst getQuestionList = async id => {\n  const data = await axios.get(`Question/getQuestion/${id}`);\n  return data;\n};\n\nconst createQuestionGroup = async value => {\n  const response = await axios.post('Question/createQuestionGroup', {\n    questionGroupTitle: value,\n    isDelete: false,\n    applyDefault: false\n  });\n  return response;\n};\n\nconst updateQuestionGroup = async data => {\n  const response = await axios.put(`Question/updateQuestionGroup/${data.id}`, {\n    questionGroupTitle: data.questionGroupTitle,\n    isDelete: false,\n    applyDefault: data.applyDefault\n  });\n  return response;\n};\n\nconst createQuestion = async (questionTitle, description, questionGroupId, isDelete) => {\n  const response = await axios.post('Question/createQuestion', {\n    questionTitle,\n    questionDescription: description,\n    questionGroupId,\n    isDelete,\n    coefficient: 1\n  });\n  return response;\n};\n\nconst updateQuestion = async _ref => {\n  let {\n    id,\n    questionTitle,\n    questionDescription,\n    rating,\n    questionId,\n    applyQuestionDescription\n  } = _ref;\n  await axios.put(`Question/updateQuestion/${id}`, {\n    questionTitle,\n    coefficient: rating,\n    isDelete: false,\n    questionDescription,\n    ...(applyQuestionDescription && {\n      applyQuestionDescription\n    }),\n    questionGroupId: questionId\n  });\n}; // TODO: Finish this endpoint\n\n\nconst deleteQuestion = async id => {\n  await axios.delete(`Question/deleteQuestion/${id}`);\n};\n\nconst deleteQuestionGroup = async id => {\n  await axios.delete(`Question/deleteQuestionGroup/${id}`);\n};\n\nconst QuestionApi = {\n  getQuestionsGroups,\n  getQuestionGroup,\n  getQuestionsList,\n  getQuestionsByAdminList,\n  getQuestionList,\n  createQuestion,\n  updateQuestion,\n  deleteQuestion,\n  createQuestionGroup,\n  updateQuestionGroup,\n  deleteQuestionGroup,\n  getTemplates\n};\nexport default QuestionApi;","map":{"version":3,"sources":["/Users/davo/Desktop/admin/src/api/question.ts"],"names":["axios","getQuestionsGroups","data","get","getQuestionGroup","id","getTemplates","response","getQuestionsList","getQuestionsByAdminList","adminId","getQuestionList","createQuestionGroup","value","post","questionGroupTitle","isDelete","applyDefault","updateQuestionGroup","put","createQuestion","questionTitle","description","questionGroupId","questionDescription","coefficient","updateQuestion","rating","questionId","applyQuestionDescription","deleteQuestion","delete","deleteQuestionGroup","QuestionApi"],"mappings":"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","sourcesContent":["import axios from '../axios'\nimport {IQuestionGroupTitle} from '../shared/types/events/events'\n\nconst getQuestionsGroups = async () => {\n  const data = await axios.get('Question/getQuestionGroups')\n  return data\n}\n\nconst getQuestionGroup = async (id: number) => {\n  const data = await axios.get(`Question/getQuestionGroup/${id}`)\n  return data\n}\n\nconst getTemplates = async () => {\n  const response = await axios.get(`Question/getTemplates`)\n  return response\n}\n\n// TODO: Finish this endpoint\nconst getQuestionsList = async () => {\n  const data = await axios.get('Question/getQuestions')\n  return data\n}\n\n// TODO: Finish this endpoint\nconst getQuestionsByAdminList = async (adminId: number) => {\n  const data = await axios.get(`Question/getQuestionsByAdmin/${adminId}`)\n  return data\n}\n\n// TODO: Finish this endpoint\nconst getQuestionList = async (id: number) => {\n  const data = await axios.get(`Question/getQuestion/${id}`)\n  return data\n}\n\nconst createQuestionGroup = async (value: string) => {\n  const response = await axios.post('Question/createQuestionGroup', {\n    questionGroupTitle: value,\n    isDelete: false,\n    applyDefault: false,\n  })\n  return response\n}\n\nconst updateQuestionGroup = async (data: IQuestionGroupTitle) => {\n  const response = await axios.put(`Question/updateQuestionGroup/${data.id}`, {\n    questionGroupTitle: data.questionGroupTitle,\n    isDelete: false,\n    applyDefault: data.applyDefault,\n  })\n  return response\n}\n\nconst createQuestion = async (\n  questionTitle: string,\n  description: string,\n  questionGroupId: number,\n  isDelete: boolean,\n) => {\n  const response = await axios.post('Question/createQuestion', {\n    questionTitle,\n    questionDescription: description,\n    questionGroupId,\n    isDelete,\n    coefficient: 1,\n  })\n  return response\n}\n\nconst updateQuestion = async ({\n  id,\n  questionTitle,\n  questionDescription,\n  rating,\n  questionId,\n  applyQuestionDescription,\n}: {\n  id: number\n  questionTitle: string\n  questionDescription: string\n  rating: string\n  questionId: number\n  applyQuestionDescription?: boolean\n}) => {\n  await axios.put(`Question/updateQuestion/${id}`, {\n    questionTitle,\n    coefficient: rating,\n    isDelete: false,\n    questionDescription,\n    ...(applyQuestionDescription && {\n      applyQuestionDescription,\n    }),\n    questionGroupId: questionId,\n  })\n}\n\n// TODO: Finish this endpoint\nconst deleteQuestion = async (id: number) => {\n  await axios.delete(`Question/deleteQuestion/${id}`)\n}\n\nconst deleteQuestionGroup = async (id: number) => {\n  await axios.delete(`Question/deleteQuestionGroup/${id}`)\n}\n\nconst QuestionApi = {\n  getQuestionsGroups,\n  getQuestionGroup,\n  getQuestionsList,\n  getQuestionsByAdminList,\n  getQuestionList,\n  createQuestion,\n  updateQuestion,\n  deleteQuestion,\n  createQuestionGroup,\n  updateQuestionGroup,\n  deleteQuestionGroup,\n  getTemplates,\n}\n\nexport default QuestionApi\n"]},"metadata":{},"sourceType":"module"}