{"ast":null,"code":"var _jsxFileName = \"/Users/davo/Desktop/admin/src/pages/events/steps/step3.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Button, Checkbox, FormControlLabel, FormGroup, TextField } from '@mui/material';\nimport CircleIcon from '@mui/icons-material/Circle';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useLocation } from 'react-router';\nimport AddModal from '../../../layouts/modal/addModal';\nimport ButtonDropDown from '../../../layouts/tooltip';\nimport MakeStyles from '../../../assets/makeStyles/makeStyles';\nimport { UseCreateEventContext } from '../../../context/createEventContext/createEventContext';\nimport QuestionApi from '../../../api/question';\nimport DeleteIcon from '../../../assets/images/Icons/deleteIcon';\nimport EventQuestionApi from '../../../api/eventQuestion';\nimport useStylesTextFields from '../../../assets/makeStyles/textFields/textFields';\nimport useStylesIcon from '../../../assets/makeStyles/icons/icons';\nimport AddNewGroupQuestionModal from '../../../layouts/modal/addNewGroupQuestionModal';\nimport EditIcon from '../../../assets/images/Icons/editIcon_2';\nimport ButtonBlue from '../../../layouts/buttons/buttonBlue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Step3 = _ref => {\n  _s();\n\n  let {\n    afterStartEvent,\n    error,\n    setIsQuestionsLoading,\n    isQuestionsLoading,\n    fullQuestions,\n    view,\n    setNextStep\n  } = _ref;\n  const stylesIcon = useStylesIcon();\n  const classes = MakeStyles();\n  const location = useLocation();\n  const stateLocation = location.state;\n  const classesTextFields = useStylesTextFields();\n  const [withOutRatingCount, setWithOutRatingCount] = useState(true);\n  const [errorUpdateQuestion, setErrorUpdateQuestion] = useState(false);\n  const [openModalAdd, setOpenModalAdd] = useState(false);\n  const [openQuestionGroupModal, setOpenQuestionGroupModal] = useState(false);\n  const [errorGroupQuestion, setErrorGroupQuestion] = useState(false);\n  const {\n    setQuestions,\n    questions,\n    setQuestionsId,\n    customNotesQuestion,\n    deletedSubQuestions,\n    setDeletedSubQuestions,\n    setCustomNotesQuestion,\n    setQuestionGroupTitleIsDefault,\n    questionGroupTitleIsDefault,\n    questionGroupTitle,\n    setQuestionGroupTitle\n  } = UseCreateEventContext();\n  const [allCheckedFeedbacks, setAllCheckedFeedbacks] = useState(true);\n  const [groupId, setGroupId] = useState(0);\n  const [ratingEvaluation, setRatingEvaluation] = useState(0);\n  const [groupRatingOfTitle, setGroupRatingOfTitle] = useState(0);\n  const [isEdited, setIsEdited] = useState(false);\n  const [questionTitle, setQuestionTitle] = useState('');\n  const [questionDescription, setQuestionDescription] = useState('');\n  const [ratingOfQuestion, setRatingOfQuestion] = useState('');\n  const [questionGroupId, setQuestionGroupId] = useState(0);\n  const [questionTitleId, setQuestionTitleId] = useState(0);\n  const [isComponentRerendered, setIsComponentRerendered] = useState(false);\n  const [isLoadingCheckedFeedback, setIsLoadingCheckedFeedback] = useState(false);\n  const [isLoadingCheckedFeedbackId, setIsLoadingCheckedFeedbackId] = useState();\n  useEffect(() => {\n    if (questions.length) {\n      setNextStep(true);\n    } else {\n      setNextStep(false);\n    }\n  }, [questions]);\n  useEffect(() => {\n    ;\n\n    (async () => {\n      setIsQuestionsLoading(true);\n\n      if (!stateLocation.createNewEvent) {\n        if (!questions.length) {\n          const response2 = await EventQuestionApi.getEventQuestionsList(stateLocation.id);\n          const updateQuestions = response2.data.map(item => ({\n            id: item.questionId,\n            questionGroupId: item.question.questionGroupId,\n            questionTitle: item.question.questionTitle,\n            questionDescription: item.question.questionDescription,\n            coefficient: item.question.coefficient\n          }));\n          setQuestions(updateQuestions);\n          setQuestionsId(response2.data.map(item => item.id));\n        }\n      } else if (!questions.length) {\n        const response2 = await QuestionApi.getQuestionsList(); // setQuestions(response2.data.map((item: IQuestions) => ({...item, isEdit: false})))\n\n        setQuestionsId(response2.data.map(item => item.id));\n        const questionGroupOfId = questionGroupTitle.map(item => item.id);\n        const updateQuestion = response2.data.filter(item => questionGroupOfId.includes(item.questionGroupId)).map(item => ({ ...item,\n          isEdit: false\n        }));\n        setQuestions(updateQuestion);\n      }\n\n      setIsQuestionsLoading(false);\n    })();\n  }, []);\n  useEffect(() => {\n    if (!stateLocation.createNewEvent) {\n      const updateDeletedSubQuestions = fullQuestions.filter(item => {\n        if (filterItems(item, questions)) {\n          return null;\n        }\n\n        return item;\n      });\n      setDeletedSubQuestions(updateDeletedSubQuestions);\n    }\n  }, [questions]);\n  useEffect(() => {\n    ratingResult();\n  }, [questions]);\n  useEffect(() => {\n    const groupRating = questionGroupTitle.map(group => {\n      if (group.id === groupId) {\n        return { ...group,\n          ratingCount: groupRatingOfTitle\n        };\n      }\n\n      return group;\n    });\n    setQuestionGroupTitle(groupRating);\n  }, [groupRatingOfTitle]);\n  useEffect(() => {\n    changeQuestionTitle();\n  }, [isEdited]);\n\n  const handleCloseAddModal = () => setOpenModalAdd(false);\n\n  const handleCloseAddGroupModal = () => {\n    setErrorGroupQuestion(false);\n    setOpenQuestionGroupModal(false);\n  };\n\n  const handleDeleteQuestionGroup = id => {\n    setQuestions(questions.filter(item => {\n      if (item.id !== id) {\n        return item;\n      }\n\n      setDeletedSubQuestions([...deletedSubQuestions, item]);\n      return null;\n    }));\n  };\n\n  const filterItems = (item, questionsItem) => {\n    const bool = questionsItem.map(obj => obj.id === item.id);\n    return bool.indexOf(true) > -1;\n  };\n\n  const handleQuestionsApply = checkedSubquestions => {\n    setIsQuestionsLoading(true);\n\n    if (checkedSubquestions) {\n      setDeletedSubQuestions([...deletedSubQuestions.filter(item => !checkedSubquestions.includes(item))]);\n      setQuestions([...questions, ...checkedSubquestions]);\n    }\n\n    setIsQuestionsLoading(false);\n  };\n\n  useEffect(() => {\n    if (questions) {\n      setIsComponentRerendered(true);\n    }\n  }, [questions]);\n\n  const handleAddNewSubQuestions = async (subQuestions, description, questionIdGroup) => {\n    const response = await QuestionApi.createQuestion(subQuestions, description, questionIdGroup, true);\n    setDeletedSubQuestions([response.data, ...deletedSubQuestions]);\n  };\n\n  const handleAddGroupQuestion = async value => {\n    setIsQuestionsLoading(true); // setQuestionGroupTitle([...questionGroupTitle, ...value])\n\n    const response = await QuestionApi.getQuestionsList();\n    const questionGroupOfId = value.map(item => item.id);\n    const questionItemId = questions.map(item => item.id); // const updateQuestionGroup = questionGroupTitleIsDefault\n    //   .filter((item) => !questionGroupOfId.includes(item.id))\n    //   .map((item) => item)\n\n    const updateQuestions = response.data.filter(item => !!(questionGroupOfId.includes(item.questionGroupId) && !questionItemId.includes(item.id))).map(item => ({ ...item,\n      questionGroup: { ...item.questionGroup,\n        applyDefault: true\n      }\n    }));\n    setQuestions([...questions, ...updateQuestions]); // setQuestionGroupTitleIsDefault([...updateQuestionGroup])\n\n    setErrorGroupQuestion(false);\n    setIsQuestionsLoading(false);\n  };\n\n  const handleCheckedCustomNodes = () => {\n    const updateCustomNotesQuestion = customNotesQuestion.map(item => ({ ...item,\n      checked: !allCheckedFeedbacks\n    }));\n    setAllCheckedFeedbacks(!allCheckedFeedbacks);\n    setCustomNotesQuestion(updateCustomNotesQuestion);\n  };\n\n  const handleChangeChecked = id => {\n    const updateCustomNotesQuestion = customNotesQuestion.map(item => {\n      if (id === item.id) {\n        return { ...item,\n          checked: !item.checked\n        };\n      }\n\n      return item;\n    });\n    setCustomNotesQuestion(updateCustomNotesQuestion);\n  };\n\n  const handleCheckedFeedback = async _ref2 => {\n    let {\n      id,\n      itemQuestionId,\n      questionTitleProps,\n      questionDescriptionProps,\n      ratingProps,\n      checked\n    } = _ref2;\n    setIsLoadingCheckedFeedbackId(itemQuestionId);\n    setIsLoadingCheckedFeedback(true);\n    const response = await QuestionApi.updateQuestion({\n      id: itemQuestionId,\n      questionTitle: questionTitleProps,\n      questionDescription: questionDescriptionProps,\n      rating: ratingProps,\n      questionId: id,\n      applyQuestionDescription: checked\n    });\n    console.log(response, 'response');\n    const response2 = await QuestionApi.getQuestionsList();\n    setQuestionsId(response2.data.map(item => item.id));\n    const questionGroupOfId = questionGroupTitle.map(item => item.id);\n    const updateQuestion = response2.data.filter(item => questionGroupOfId.includes(item.questionGroupId)).map(item => ({ ...item,\n      isEdit: false\n    }));\n    setQuestions(updateQuestion);\n    setIsLoadingCheckedFeedback(false);\n  };\n\n  const updateRating = (id, assessmentId, value) => {\n    if (Number(value) > 10 || Number(value) < 0) {\n      setErrorUpdateQuestion(true);\n    } else {\n      setErrorUpdateQuestion(false);\n    }\n\n    questionGroupTitle.forEach(group => {\n      if (group.id === id) {\n        const result = questions.map(rating => {\n          if (rating.id === assessmentId) {\n            return { ...rating,\n              coefficient: value\n            };\n          }\n\n          return rating;\n        });\n        setQuestions(result);\n      }\n    });\n    setRatingEvaluation(assessmentId);\n    setGroupId(id);\n  };\n\n  const ratingResult = () => {\n    questionGroupTitle.forEach(group => {\n      if (group.id === groupId) {\n        const result = questions.map(rating => {\n          if (group.id === Number(rating.questionGroupId)) {\n            if (rating !== null && rating !== void 0 && rating.coefficient) {\n              if (Number(rating === null || rating === void 0 ? void 0 : rating.coefficient) <= 10 || Number(rating === null || rating === void 0 ? void 0 : rating.coefficient) >= 0) return Number(rating === null || rating === void 0 ? void 0 : rating.coefficient);\n            }\n          }\n\n          return undefined;\n        }).filter(i => i !== undefined);\n        const groupRating = result.reduce((p, c) => p + c, 0);\n        questions.forEach(item => {\n          if (item.id === ratingEvaluation) {\n            setGroupRatingOfTitle(groupRating);\n          }\n        });\n      }\n    });\n  };\n\n  const handleRatingCount = () => {\n    setWithOutRatingCount(!withOutRatingCount);\n  };\n\n  const editQuestionTitle = (id, questionId, text) => {\n    setQuestionTitle(text);\n    questionGroupTitle.forEach(group => {\n      if (group.id === id) {\n        const result = questions.map(item => {\n          if (item.id === questionId) {\n            return { ...item,\n              questionTitle: text\n            };\n          }\n\n          return item;\n        });\n        setQuestions(result);\n      }\n    });\n  };\n\n  const editQuestionDescription = (id, questionId, text) => {\n    setQuestionDescription(text);\n    questionGroupTitle.forEach(group => {\n      if (group.id === id) {\n        const result = questions.map(item => {\n          if (item.id === questionId) {\n            return { ...item,\n              questionDescription: text\n            };\n          }\n\n          return item;\n        });\n        setQuestions(result);\n      }\n    });\n  };\n\n  const handleEditTitle = (id, questionId, edited) => {\n    questionGroupTitle.forEach(group => {\n      if (group.id === id) {\n        const result = questions.map(item => {\n          if (item.id === questionId) {\n            setRatingOfQuestion((item === null || item === void 0 ? void 0 : item.coefficient) || '1');\n            setIsEdited(!edited);\n            setGroupId(id);\n            setQuestionGroupId(id);\n            setQuestionTitleId(questionId);\n            return { ...item,\n              isEdit: !edited\n            };\n          }\n\n          return { ...item,\n            isEdit: false\n          };\n        });\n        setQuestions(result);\n      }\n    });\n  };\n\n  const changeQuestionTitle = async () => {\n    if (!isEdited && questionGroupId !== 0) {\n      await QuestionApi.updateQuestion({\n        id: questionTitleId,\n        questionTitle,\n        questionDescription,\n        rating: ratingOfQuestion,\n        questionId: questionGroupId\n      });\n    }\n  };\n\n  const handleDeleteGroupQuestion = async itemProps => {\n    setQuestionGroupTitle(questionGroupTitle.filter(item => item.id !== itemProps.id));\n    setQuestions(questions.filter(item => item.questionGroupId !== itemProps.id && item));\n    setDeletedSubQuestions([...deletedSubQuestions.filter(item => item.questionGroupId !== itemProps.id)]);\n    setQuestionGroupTitleIsDefault([...questionGroupTitleIsDefault, itemProps]);\n    await QuestionApi.updateQuestionGroup({ ...itemProps,\n      applyDefault: false\n    });\n  };\n\n  useEffect(() => {\n    changeQuestionTitle();\n  }, [isEdited]);\n  return isComponentRerendered && /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"create-event-of-step-heading\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"button-item font-size-18 font-weight-500 d-flex align-center line-height-22 d-flex\",\n        children: /*#__PURE__*/_jsxDEV(ButtonBlue, {\n          disabled: afterStartEvent || view,\n          handleClick: handleRatingCount,\n          padding: \"padding16\",\n          title: withOutRatingCount ? 'without rating Count' : 'with rating count'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonBlue, {\n        disabled: afterStartEvent || view,\n        handleClick: () => setOpenQuestionGroupModal(true),\n        title: \"Add Criteria\",\n        width: \"width150\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddModal, {\n        openModal: openModalAdd,\n        closeModal: handleCloseAddModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"choose-evaluation-criteria-container\",\n      children: [isQuestionsLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-center m-auto mt-20\",\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 13\n      }, this) : questionGroupTitle.map(item => item.applyDefault && /*#__PURE__*/_jsxDEV(Box, {\n        className: \"choose-evaluation-criteria-column mt-14\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          className: \"choose-evaluation-criteria\",\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"choose-evaluation-criteria-group align-center\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              className: \"font-size-16 font-weight-700 line-height-22 color-dark-blue d-flex\",\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                className: \"mr-40\",\n                children: [item.questionGroupTitle, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                children: withOutRatingCount && (`-${item.ratingCount}` ? item.ratingCount : 0)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              className: \"d-flex align-center\",\n              children: [/*#__PURE__*/_jsxDEV(ButtonDropDown, {\n                view: view,\n                afterStartEvent: afterStartEvent,\n                buttonText: \"Add sub criteria\",\n                tooltip: \"checkbox\",\n                deletedSubQuestions: deletedSubQuestions,\n                handleAddNewSubQuestions: handleAddNewSubQuestions,\n                applyAddFromTo: null,\n                questionGroupId: item.id,\n                handleQuestionsApplyProps: handleQuestionsApply\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                className: \"ml-10\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  disabled: afterStartEvent || view,\n                  onClick: () => handleDeleteGroupQuestion(item),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 483,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 479,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"choose-evaluation-criteria-group-checkboxes\",\n            children: questions.map(itemQuestion => {\n              if (itemQuestion.questionGroupId === item.id) {\n                return /*#__PURE__*/_jsxDEV(Box, {\n                  className: \"checkboxLabel mb-50 mt-10\",\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    className: \"mr-10 d-flex align-center\",\n                    children: [/*#__PURE__*/_jsxDEV(Box, {\n                      className: stylesIcon.smallIcon,\n                      children: /*#__PURE__*/_jsxDEV(CircleIcon, {\n                        fontSize: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 495,\n                        columnNumber: 37\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 494,\n                      columnNumber: 35\n                    }, this), !itemQuestion.isEdit ? /*#__PURE__*/_jsxDEV(Box, {\n                      className: \"ml-16 color-dark-blue\",\n                      children: [/*#__PURE__*/_jsxDEV(Box, {\n                        children: itemQuestion.questionTitle\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 499,\n                        columnNumber: 39\n                      }, this), /*#__PURE__*/_jsxDEV(Box, {\n                        className: \"mt-20\",\n                        children: itemQuestion.questionDescription\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 500,\n                        columnNumber: 39\n                      }, this), /*#__PURE__*/_jsxDEV(Box, {\n                        className: \"mt-20 d-flex align-center\",\n                        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n                          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                              color: \"default\",\n                              onClick: () => !view && handleCheckedFeedback({\n                                id: item.id,\n                                itemQuestionId: itemQuestion.id,\n                                checked: !itemQuestion.applyQuestionDescription,\n                                questionDescriptionProps: itemQuestion.questionDescription,\n                                questionTitleProps: itemQuestion.questionTitle,\n                                ratingProps: itemQuestion.coefficient\n                              }),\n                              className: `${classes.checkboxColor}`,\n                              checked: itemQuestion.applyQuestionDescription\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 507,\n                              columnNumber: 47\n                            }, this),\n                            label: /*#__PURE__*/_jsxDEV(Box, {\n                              className: \"font-size-16 font-weight-500 line-height-22 color-dark-blue\",\n                              children: \"Feedback\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 526,\n                              columnNumber: 47\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 505,\n                            columnNumber: 43\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 504,\n                          columnNumber: 41\n                        }, this), /*#__PURE__*/_jsxDEV(Box, {\n                          children: isLoadingCheckedFeedback && itemQuestion.id === isLoadingCheckedFeedbackId && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 535,\n                            columnNumber: 47\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 532,\n                          columnNumber: 41\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 503,\n                        columnNumber: 39\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 498,\n                      columnNumber: 37\n                    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n                      className: \"ml-16 color-dark-blue\",\n                      children: [/*#__PURE__*/_jsxDEV(Box, {\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          maxRows: 4,\n                          multiline: true,\n                          label: \"Title\",\n                          className: \"border-radius-30 background-input text-field\",\n                          value: itemQuestion.questionTitle,\n                          onChange: e => editQuestionTitle(item.id, itemQuestion.id, e.target.value)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 543,\n                          columnNumber: 41\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 542,\n                        columnNumber: 39\n                      }, this), /*#__PURE__*/_jsxDEV(Box, {\n                        className: \"mt-20\",\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          maxRows: 4,\n                          multiline: true,\n                          label: \"Description\",\n                          className: \"border-radius-30 background-input text-field\",\n                          value: itemQuestion.questionDescription,\n                          onChange: e => editQuestionDescription(item.id, itemQuestion.id, e.target.value)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 559,\n                          columnNumber: 41\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 558,\n                        columnNumber: 39\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 541,\n                      columnNumber: 37\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 493,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(Box, {\n                    className: \"icons-container d-flex justify-end\",\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      className: \"d-flex justify-end align-center\",\n                      minWidth: 190,\n                      maxWidth: 190,\n                      children: [withOutRatingCount && /*#__PURE__*/_jsxDEV(Box, {\n                        className: \"mr-10\",\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          size: \"small\",\n                          disabled: afterStartEvent || view,\n                          className: `${classesTextFields.numberRemoveArrowUpDown}`,\n                          type: \"number\",\n                          placeholder: \"0\",\n                          value: itemQuestion.coefficient,\n                          InputProps: {\n                            inputProps: {\n                              min: 0,\n                              max: 10\n                            }\n                          },\n                          error: itemQuestion.coefficient ? Number(itemQuestion.coefficient) > 10 || Number(itemQuestion.coefficient) < 0 : false,\n                          onChange: e => updateRating(item.id, itemQuestion.id, e.target.value)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 585,\n                          columnNumber: 41\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 584,\n                        columnNumber: 39\n                      }, this), /*#__PURE__*/_jsxDEV(Button, {\n                        disabled: afterStartEvent || view,\n                        onClick: () => handleDeleteQuestionGroup(itemQuestion.id),\n                        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 609,\n                          columnNumber: 39\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 605,\n                        columnNumber: 37\n                      }, this), !itemQuestion.isEdit ? /*#__PURE__*/_jsxDEV(Button, {\n                        disabled: afterStartEvent || view,\n                        className: \"cursor-pointer width-20\",\n                        onClick: () => handleEditTitle(item.id, itemQuestion.id, itemQuestion.isEdit),\n                        children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 623,\n                          columnNumber: 41\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 612,\n                        columnNumber: 39\n                      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                        disabled: afterStartEvent || view,\n                        className: \"cursor-pointer width-20\",\n                        onClick: () => !errorUpdateQuestion && handleEditTitle(item.id, itemQuestion.id, itemQuestion.isEdit),\n                        children: /*#__PURE__*/_jsxDEV(CheckCircleOutlineIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 638,\n                          columnNumber: 41\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 626,\n                        columnNumber: 39\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 578,\n                      columnNumber: 35\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 577,\n                    columnNumber: 33\n                  }, this)]\n                }, itemQuestion.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 31\n                }, this);\n              }\n\n              return null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 21\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 19\n      }, this)), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"choose-evaluation-criteria-column mt-14\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          className: \"choose-evaluation-criteria\",\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"choose-evaluation-criteria-group align-center\",\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                color: \"default\",\n                onClick: () => !view && handleCheckedCustomNodes(),\n                className: `${classes.checkboxColor}`,\n                checked: allCheckedFeedbacks\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 21\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(Box, {\n                className: \"font-size-16 font-weight-500 line-height-22 color-dark-blue\",\n                children: \"Custom Notes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 667,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"choose-evaluation-criteria-group-checkboxes\",\n            children: customNotesQuestion.map(itemQuestion => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                defaultChecked: true,\n                color: \"default\",\n                onClick: () => !view && handleChangeChecked(itemQuestion.id),\n                checked: itemQuestion.checked,\n                className: `${classes.checkboxColor}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 23\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(Box, {\n                className: \"checkboxLabel\",\n                children: itemQuestion.questionName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 28\n              }, this)\n            }, itemQuestion.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 13\n        }, this)\n      }, 4, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AddNewGroupQuestionModal, {\n      openModal: openQuestionGroupModal,\n      closeModal: handleCloseAddGroupModal,\n      handleSaveDetailsProps: handleAddGroupQuestion,\n      loading: isQuestionsLoading,\n      setLoading: setIsQuestionsLoading,\n      error: errorGroupQuestion,\n      dataProps: questionGroupTitleIsDefault\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"color-red mt-20\",\n      children: error && 'Please fill out required fields'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Step3, \"ofb8RA4YSgVS+YzrVaqug2DTRis=\", false, function () {\n  return [useStylesIcon, useLocation, useStylesTextFields];\n});\n\n_c = Step3;\nexport default Step3;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step3\");","map":{"version":3,"sources":["/Users/davo/Desktop/admin/src/pages/events/steps/step3.tsx"],"names":["React","useEffect","useState","Box","Button","Checkbox","FormControlLabel","FormGroup","TextField","CircleIcon","CheckCircleOutlineIcon","CircularProgress","useLocation","AddModal","ButtonDropDown","MakeStyles","UseCreateEventContext","QuestionApi","DeleteIcon","EventQuestionApi","useStylesTextFields","useStylesIcon","AddNewGroupQuestionModal","EditIcon","ButtonBlue","Step3","afterStartEvent","error","setIsQuestionsLoading","isQuestionsLoading","fullQuestions","view","setNextStep","stylesIcon","classes","location","stateLocation","state","classesTextFields","withOutRatingCount","setWithOutRatingCount","errorUpdateQuestion","setErrorUpdateQuestion","openModalAdd","setOpenModalAdd","openQuestionGroupModal","setOpenQuestionGroupModal","errorGroupQuestion","setErrorGroupQuestion","setQuestions","questions","setQuestionsId","customNotesQuestion","deletedSubQuestions","setDeletedSubQuestions","setCustomNotesQuestion","setQuestionGroupTitleIsDefault","questionGroupTitleIsDefault","questionGroupTitle","setQuestionGroupTitle","allCheckedFeedbacks","setAllCheckedFeedbacks","groupId","setGroupId","ratingEvaluation","setRatingEvaluation","groupRatingOfTitle","setGroupRatingOfTitle","isEdited","setIsEdited","questionTitle","setQuestionTitle","questionDescription","setQuestionDescription","ratingOfQuestion","setRatingOfQuestion","questionGroupId","setQuestionGroupId","questionTitleId","setQuestionTitleId","isComponentRerendered","setIsComponentRerendered","isLoadingCheckedFeedback","setIsLoadingCheckedFeedback","isLoadingCheckedFeedbackId","setIsLoadingCheckedFeedbackId","length","createNewEvent","response2","getEventQuestionsList","id","updateQuestions","data","map","item","questionId","question","coefficient","getQuestionsList","questionGroupOfId","updateQuestion","filter","includes","isEdit","updateDeletedSubQuestions","filterItems","ratingResult","groupRating","group","ratingCount","changeQuestionTitle","handleCloseAddModal","handleCloseAddGroupModal","handleDeleteQuestionGroup","questionsItem","bool","obj","indexOf","handleQuestionsApply","checkedSubquestions","handleAddNewSubQuestions","subQuestions","description","questionIdGroup","response","createQuestion","handleAddGroupQuestion","value","questionItemId","questionGroup","applyDefault","handleCheckedCustomNodes","updateCustomNotesQuestion","checked","handleChangeChecked","handleCheckedFeedback","itemQuestionId","questionTitleProps","questionDescriptionProps","ratingProps","rating","applyQuestionDescription","console","log","updateRating","assessmentId","Number","forEach","result","undefined","i","reduce","p","c","handleRatingCount","editQuestionTitle","text","editQuestionDescription","handleEditTitle","edited","handleDeleteGroupQuestion","itemProps","updateQuestionGroup","itemQuestion","smallIcon","checkboxColor","e","target","numberRemoveArrowUpDown","inputProps","min","max","questionName"],"mappings":"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","sourcesContent":["import React, {Dispatch, useEffect, useState} from 'react'\nimport {Box, Button, Checkbox, FormControlLabel, FormGroup, TextField} from '@mui/material'\nimport CircleIcon from '@mui/icons-material/Circle'\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport {useLocation} from 'react-router'\nimport AddModal from '../../../layouts/modal/addModal'\nimport ButtonDropDown from '../../../layouts/tooltip'\nimport MakeStyles from '../../../assets/makeStyles/makeStyles'\nimport {UseCreateEventContext} from '../../../context/createEventContext/createEventContext'\nimport {ICreateEventProps} from '../../../context/createEventContext/createEventContext.props'\nimport QuestionApi from '../../../api/question'\nimport {IQuestionGroupTitle, IQuestions} from '../../../shared/types/events/events'\nimport DeleteIcon from '../../../assets/images/Icons/deleteIcon'\nimport EventQuestionApi from '../../../api/eventQuestion'\nimport useStylesTextFields from '../../../assets/makeStyles/textFields/textFields'\nimport useStylesIcon from '../../../assets/makeStyles/icons/icons'\nimport AddNewGroupQuestionModal from '../../../layouts/modal/addNewGroupQuestionModal'\nimport EditIcon from '../../../assets/images/Icons/editIcon_2'\nimport ButtonBlue from '../../../layouts/buttons/buttonBlue'\n\nconst Step3 = ({\n  afterStartEvent,\n  error,\n  setIsQuestionsLoading,\n  isQuestionsLoading,\n  fullQuestions,\n  view,\n  setNextStep,\n}: {\n  afterStartEvent: boolean\n  error: boolean\n  setIsQuestionsLoading: Dispatch<React.SetStateAction<boolean>>\n  isQuestionsLoading: boolean\n  fullQuestions: IQuestions[]\n  view: boolean\n  setNextStep: Dispatch<React.SetStateAction<boolean>>\n}) => {\n  const stylesIcon = useStylesIcon()\n  const classes = MakeStyles()\n  const location = useLocation()\n  const stateLocation = location.state as {id: number; createNewEvent: boolean}\n  const classesTextFields = useStylesTextFields()\n\n  const [withOutRatingCount, setWithOutRatingCount] = useState<boolean>(true)\n  const [errorUpdateQuestion, setErrorUpdateQuestion] = useState<boolean>(false)\n  const [openModalAdd, setOpenModalAdd] = useState(false)\n  const [openQuestionGroupModal, setOpenQuestionGroupModal] = useState<boolean>(false)\n  const [errorGroupQuestion, setErrorGroupQuestion] = useState(false)\n\n  const {\n    setQuestions,\n    questions,\n    setQuestionsId,\n    customNotesQuestion,\n    deletedSubQuestions,\n    setDeletedSubQuestions,\n    setCustomNotesQuestion,\n    setQuestionGroupTitleIsDefault,\n    questionGroupTitleIsDefault,\n    questionGroupTitle,\n    setQuestionGroupTitle,\n  } = UseCreateEventContext() as ICreateEventProps\n  const [allCheckedFeedbacks, setAllCheckedFeedbacks] = useState<boolean>(true)\n  const [groupId, setGroupId] = useState<number>(0)\n  const [ratingEvaluation, setRatingEvaluation] = useState<number>(0)\n  const [groupRatingOfTitle, setGroupRatingOfTitle] = useState<number>(0)\n  const [isEdited, setIsEdited] = useState<boolean>(false)\n  const [questionTitle, setQuestionTitle] = useState('')\n  const [questionDescription, setQuestionDescription] = useState('')\n  const [ratingOfQuestion, setRatingOfQuestion] = useState('')\n  const [questionGroupId, setQuestionGroupId] = useState<number>(0)\n  const [questionTitleId, setQuestionTitleId] = useState<number>(0)\n  const [isComponentRerendered, setIsComponentRerendered] = useState<boolean>(false)\n  const [isLoadingCheckedFeedback, setIsLoadingCheckedFeedback] = useState<boolean>(false)\n  const [isLoadingCheckedFeedbackId, setIsLoadingCheckedFeedbackId] = useState<number>()\n\n  useEffect(() => {\n    if (questions.length) {\n      setNextStep(true)\n    } else {\n      setNextStep(false)\n    }\n  }, [questions])\n\n  useEffect(() => {\n    ;(async () => {\n      setIsQuestionsLoading(true)\n\n      if (!stateLocation.createNewEvent) {\n        if (!questions.length) {\n          const response2 = await EventQuestionApi.getEventQuestionsList(stateLocation.id)\n          const updateQuestions = response2.data.map(\n            (item: {\n              questionId: number\n              question: {\n                questionTitle: string\n                questionGroupId: number\n                id: number\n                questionDescription: string\n                coefficient: number\n              }\n            }) => ({\n              id: item.questionId,\n              questionGroupId: item.question.questionGroupId,\n              questionTitle: item.question.questionTitle,\n              questionDescription: item.question.questionDescription,\n              coefficient: item.question.coefficient,\n            }),\n          )\n\n          setQuestions(updateQuestions)\n          setQuestionsId(response2.data.map((item: {id: number}) => item.id))\n        }\n      } else if (!questions.length) {\n        const response2 = await QuestionApi.getQuestionsList()\n        // setQuestions(response2.data.map((item: IQuestions) => ({...item, isEdit: false})))\n        setQuestionsId(response2.data.map((item: {id: number}) => item.id))\n\n        const questionGroupOfId = questionGroupTitle.map((item) => item.id)\n        const updateQuestion = response2.data\n          .filter((item: IQuestions) => questionGroupOfId.includes(item.questionGroupId))\n          .map((item: IQuestions) => ({...item, isEdit: false}))\n        setQuestions(updateQuestion)\n      }\n      setIsQuestionsLoading(false)\n    })()\n  }, [])\n\n  useEffect(() => {\n    if (!stateLocation.createNewEvent) {\n      const updateDeletedSubQuestions = fullQuestions.filter((item) => {\n        if (filterItems(item, questions)) {\n          return null\n        }\n        return item\n      })\n      setDeletedSubQuestions(updateDeletedSubQuestions)\n    }\n  }, [questions])\n\n  useEffect(() => {\n    ratingResult()\n  }, [questions])\n\n  useEffect(() => {\n    const groupRating = questionGroupTitle.map((group) => {\n      if (group.id === groupId) {\n        return {...group, ratingCount: groupRatingOfTitle}\n      }\n      return group\n    })\n    setQuestionGroupTitle(groupRating)\n  }, [groupRatingOfTitle])\n\n  useEffect(() => {\n    changeQuestionTitle()\n  }, [isEdited])\n\n  const handleCloseAddModal = () => setOpenModalAdd(false)\n\n  const handleCloseAddGroupModal = () => {\n    setErrorGroupQuestion(false)\n    setOpenQuestionGroupModal(false)\n  }\n\n  const handleDeleteQuestionGroup = (id: number) => {\n    setQuestions(\n      questions.filter((item) => {\n        if (item.id !== id) {\n          return item\n        }\n        setDeletedSubQuestions([...deletedSubQuestions, item])\n        return null\n      }),\n    )\n  }\n\n  const filterItems = (item: IQuestions, questionsItem: IQuestions[]) => {\n    const bool = questionsItem.map((obj) => obj.id === item.id)\n    return bool.indexOf(true) > -1\n  }\n\n  const handleQuestionsApply = (checkedSubquestions: IQuestions[]) => {\n    setIsQuestionsLoading(true)\n    if (checkedSubquestions) {\n      setDeletedSubQuestions([\n        ...deletedSubQuestions.filter((item) => !checkedSubquestions.includes(item)),\n      ])\n\n      setQuestions([...questions, ...checkedSubquestions])\n    }\n    setIsQuestionsLoading(false)\n  }\n\n  useEffect(() => {\n    if (questions) {\n      setIsComponentRerendered(true)\n    }\n  }, [questions])\n\n  const handleAddNewSubQuestions = async (\n    subQuestions: string,\n    description: string,\n    questionIdGroup: number,\n  ) => {\n    const response = await QuestionApi.createQuestion(\n      subQuestions,\n      description,\n      questionIdGroup,\n      true,\n    )\n    setDeletedSubQuestions([response.data, ...deletedSubQuestions])\n  }\n\n  const handleAddGroupQuestion = async (value: IQuestionGroupTitle[]) => {\n    setIsQuestionsLoading(true)\n    // setQuestionGroupTitle([...questionGroupTitle, ...value])\n\n    const response = await QuestionApi.getQuestionsList()\n\n    const questionGroupOfId = value.map((item) => item.id)\n    const questionItemId = questions.map((item) => item.id)\n\n    // const updateQuestionGroup = questionGroupTitleIsDefault\n    //   .filter((item) => !questionGroupOfId.includes(item.id))\n    //   .map((item) => item)\n\n    const updateQuestions = response.data\n      .filter(\n        (item: {questionGroupId: number; id: number; questionGroup: {applyDefault: boolean}}) =>\n          !!(questionGroupOfId.includes(item.questionGroupId) && !questionItemId.includes(item.id)),\n      )\n      .map((item: {questionGroup: {applyDefault: boolean}}) => ({\n        ...item,\n        questionGroup: {...item.questionGroup, applyDefault: true},\n      }))\n\n    setQuestions([...questions, ...updateQuestions])\n    // setQuestionGroupTitleIsDefault([...updateQuestionGroup])\n    setErrorGroupQuestion(false)\n    setIsQuestionsLoading(false)\n  }\n\n  const handleCheckedCustomNodes = () => {\n    const updateCustomNotesQuestion = customNotesQuestion.map((item) => ({\n      ...item,\n      checked: !allCheckedFeedbacks,\n    }))\n    setAllCheckedFeedbacks(!allCheckedFeedbacks)\n    setCustomNotesQuestion(updateCustomNotesQuestion)\n  }\n\n  const handleChangeChecked = (id: number) => {\n    const updateCustomNotesQuestion = customNotesQuestion.map((item) => {\n      if (id === item.id) {\n        return {...item, checked: !item.checked}\n      }\n      return item\n    })\n\n    setCustomNotesQuestion(updateCustomNotesQuestion)\n  }\n\n  const handleCheckedFeedback = async ({\n    id,\n    itemQuestionId,\n    questionTitleProps,\n    questionDescriptionProps,\n    ratingProps,\n    checked,\n  }: {\n    id: number\n    itemQuestionId: number\n    questionTitleProps: string\n    questionDescriptionProps: string\n    ratingProps: string\n    checked: boolean\n  }) => {\n    setIsLoadingCheckedFeedbackId(itemQuestionId)\n    setIsLoadingCheckedFeedback(true)\n    const response = await QuestionApi.updateQuestion({\n      id: itemQuestionId,\n      questionTitle: questionTitleProps,\n      questionDescription: questionDescriptionProps,\n      rating: ratingProps,\n      questionId: id,\n      applyQuestionDescription: checked,\n    })\n    console.log(response, 'response')\n    const response2 = await QuestionApi.getQuestionsList()\n    setQuestionsId(response2.data.map((item: {id: number}) => item.id))\n\n    const questionGroupOfId = questionGroupTitle.map((item) => item.id)\n    const updateQuestion = response2.data\n      .filter((item: IQuestions) => questionGroupOfId.includes(item.questionGroupId))\n      .map((item: IQuestions) => ({...item, isEdit: false}))\n    setQuestions(updateQuestion)\n    setIsLoadingCheckedFeedback(false)\n  }\n\n  const updateRating = (id: number, assessmentId: number, value: string) => {\n    if (Number(value) > 10 || Number(value) < 0) {\n      setErrorUpdateQuestion(true)\n    } else {\n      setErrorUpdateQuestion(false)\n    }\n\n    questionGroupTitle.forEach((group) => {\n      if (group.id === id) {\n        const result = questions.map((rating) => {\n          if (rating.id === assessmentId) {\n            return {...rating, coefficient: value}\n          }\n          return rating\n        })\n        setQuestions(result)\n      }\n    })\n    setRatingEvaluation(assessmentId)\n    setGroupId(id)\n  }\n\n  const ratingResult = () => {\n    questionGroupTitle.forEach((group) => {\n      if (group.id === groupId) {\n        const result = questions\n          .map((rating) => {\n            if (group.id === Number(rating.questionGroupId)) {\n              if (rating?.coefficient) {\n                if (Number(rating?.coefficient) <= 10 || Number(rating?.coefficient) >= 0)\n                  return Number(rating?.coefficient)\n              }\n            }\n            return undefined\n          })\n          .filter((i) => i !== undefined) as number[]\n        const groupRating = result.reduce((p, c) => p + c, 0)\n        questions.forEach((item) => {\n          if (item.id === ratingEvaluation) {\n            setGroupRatingOfTitle(groupRating)\n          }\n        })\n      }\n    })\n  }\n\n  const handleRatingCount = () => {\n    setWithOutRatingCount(!withOutRatingCount)\n  }\n\n  const editQuestionTitle = (id: number, questionId: number, text: string) => {\n    setQuestionTitle(text)\n    questionGroupTitle.forEach((group) => {\n      if (group.id === id) {\n        const result = questions.map((item) => {\n          if (item.id === questionId) {\n            return {...item, questionTitle: text}\n          }\n          return item\n        })\n        setQuestions(result)\n      }\n    })\n  }\n\n  const editQuestionDescription = (id: number, questionId: number, text: string) => {\n    setQuestionDescription(text)\n    questionGroupTitle.forEach((group) => {\n      if (group.id === id) {\n        const result = questions.map((item) => {\n          if (item.id === questionId) {\n            return {...item, questionDescription: text}\n          }\n          return item\n        })\n        setQuestions(result)\n      }\n    })\n  }\n\n  const handleEditTitle = (id: number, questionId: number, edited: boolean) => {\n    questionGroupTitle.forEach((group) => {\n      if (group.id === id) {\n        const result = questions.map((item) => {\n          if (item.id === questionId) {\n            setRatingOfQuestion(item?.coefficient || '1')\n            setIsEdited(!edited)\n            setGroupId(id)\n            setQuestionGroupId(id)\n            setQuestionTitleId(questionId)\n\n            return {...item, isEdit: !edited}\n          }\n          return {...item, isEdit: false}\n        })\n        setQuestions(result)\n      }\n    })\n  }\n\n  const changeQuestionTitle = async () => {\n    if (!isEdited && questionGroupId !== 0) {\n      await QuestionApi.updateQuestion({\n        id: questionTitleId,\n        questionTitle,\n        questionDescription,\n        rating: ratingOfQuestion,\n        questionId: questionGroupId,\n      })\n    }\n  }\n\n  const handleDeleteGroupQuestion = async (itemProps: IQuestionGroupTitle) => {\n    setQuestionGroupTitle(questionGroupTitle.filter((item) => item.id !== itemProps.id))\n    setQuestions(questions.filter((item) => item.questionGroupId !== itemProps.id && item))\n    setDeletedSubQuestions([\n      ...deletedSubQuestions.filter((item) => item.questionGroupId !== itemProps.id),\n    ])\n    setQuestionGroupTitleIsDefault([...questionGroupTitleIsDefault, itemProps])\n    await QuestionApi.updateQuestionGroup({...itemProps, applyDefault: false})\n  }\n\n  useEffect(() => {\n    changeQuestionTitle()\n  }, [isEdited])\n\n  return (\n    isComponentRerendered && (\n      <Box>\n        <Box className=\"create-event-of-step-heading\">\n          <Box className=\"button-item font-size-18 font-weight-500 d-flex align-center line-height-22 d-flex\">\n            <ButtonBlue\n              disabled={afterStartEvent || view}\n              handleClick={handleRatingCount}\n              padding=\"padding16\"\n              title={withOutRatingCount ? 'without rating Count' : 'with rating count'}\n            />\n          </Box>\n          <ButtonBlue\n            disabled={afterStartEvent || view}\n            handleClick={() => setOpenQuestionGroupModal(true)}\n            title=\"Add Criteria\"\n            width=\"width150\"\n          />\n          <AddModal openModal={openModalAdd} closeModal={handleCloseAddModal} />\n        </Box>\n        <Box className=\"choose-evaluation-criteria-container\">\n          {isQuestionsLoading ? (\n            <div className=\"d-flex justify-center m-auto mt-20\">\n              <CircularProgress />\n            </div>\n          ) : (\n            questionGroupTitle.map(\n              (item) =>\n                item.applyDefault && (\n                  <Box key={item.id} className=\"choose-evaluation-criteria-column mt-14\">\n                    <Box className=\"choose-evaluation-criteria\">\n                      <FormGroup className=\"choose-evaluation-criteria-group align-center\">\n                        <Box className=\"font-size-16 font-weight-700 line-height-22 color-dark-blue d-flex\">\n                          <Box className=\"mr-40\">{item.questionGroupTitle} </Box>\n                          <Box>\n                            {withOutRatingCount && (`-${item.ratingCount}` ? item.ratingCount : 0)}\n                          </Box>\n                        </Box>\n                        <Box className=\"d-flex align-center\">\n                          <ButtonDropDown\n                            view={view}\n                            afterStartEvent={afterStartEvent}\n                            buttonText=\"Add sub criteria\"\n                            tooltip=\"checkbox\"\n                            deletedSubQuestions={deletedSubQuestions}\n                            handleAddNewSubQuestions={handleAddNewSubQuestions}\n                            applyAddFromTo={null}\n                            questionGroupId={item.id}\n                            handleQuestionsApplyProps={handleQuestionsApply}\n                          />\n                          <Box className=\"ml-10\">\n                            <Button\n                              disabled={afterStartEvent || view}\n                              onClick={() => handleDeleteGroupQuestion(item)}\n                            >\n                              <DeleteIcon />\n                            </Button>\n                          </Box>\n                        </Box>\n                      </FormGroup>\n                      <FormGroup className=\"choose-evaluation-criteria-group-checkboxes\">\n                        {questions.map((itemQuestion) => {\n                          if (itemQuestion.questionGroupId === item.id) {\n                            return (\n                              <Box key={itemQuestion.id} className=\"checkboxLabel mb-50 mt-10\">\n                                <Box className=\"mr-10 d-flex align-center\">\n                                  <Box className={stylesIcon.smallIcon}>\n                                    <CircleIcon fontSize=\"small\" />\n                                  </Box>\n                                  {!itemQuestion.isEdit ? (\n                                    <Box className=\"ml-16 color-dark-blue\">\n                                      <Box>{itemQuestion.questionTitle}</Box>\n                                      <Box className=\"mt-20\">\n                                        {itemQuestion.questionDescription}\n                                      </Box>\n                                      <Box className=\"mt-20 d-flex align-center\">\n                                        <FormGroup>\n                                          <FormControlLabel\n                                            control={\n                                              <Checkbox\n                                                color=\"default\"\n                                                onClick={() =>\n                                                  !view &&\n                                                  handleCheckedFeedback({\n                                                    id: item.id,\n                                                    itemQuestionId: itemQuestion.id,\n                                                    checked: !itemQuestion.applyQuestionDescription,\n                                                    questionDescriptionProps:\n                                                      itemQuestion.questionDescription,\n                                                    questionTitleProps: itemQuestion.questionTitle,\n                                                    ratingProps: itemQuestion.coefficient,\n                                                  })\n                                                }\n                                                className={`${classes.checkboxColor}`}\n                                                checked={itemQuestion.applyQuestionDescription}\n                                              />\n                                            }\n                                            label={\n                                              <Box className=\"font-size-16 font-weight-500 line-height-22 color-dark-blue\">\n                                                Feedback\n                                              </Box>\n                                            }\n                                          />\n                                        </FormGroup>\n                                        <Box>\n                                          {isLoadingCheckedFeedback &&\n                                            itemQuestion.id === isLoadingCheckedFeedbackId && (\n                                              <CircularProgress />\n                                            )}\n                                        </Box>\n                                      </Box>\n                                    </Box>\n                                  ) : (\n                                    <Box className=\"ml-16 color-dark-blue\">\n                                      <Box>\n                                        <TextField\n                                          maxRows={4}\n                                          multiline\n                                          label=\"Title\"\n                                          className=\"border-radius-30 background-input text-field\"\n                                          value={itemQuestion.questionTitle}\n                                          onChange={(e) =>\n                                            editQuestionTitle(\n                                              item.id,\n                                              itemQuestion.id,\n                                              e.target.value,\n                                            )\n                                          }\n                                        />\n                                      </Box>\n                                      <Box className=\"mt-20\">\n                                        <TextField\n                                          maxRows={4}\n                                          multiline\n                                          label=\"Description\"\n                                          className=\"border-radius-30 background-input text-field\"\n                                          value={itemQuestion.questionDescription}\n                                          onChange={(e) =>\n                                            editQuestionDescription(\n                                              item.id,\n                                              itemQuestion.id,\n                                              e.target.value,\n                                            )\n                                          }\n                                        />\n                                      </Box>\n                                    </Box>\n                                  )}\n                                </Box>\n                                <Box className=\"icons-container d-flex justify-end\">\n                                  <Box\n                                    className=\"d-flex justify-end align-center\"\n                                    minWidth={190}\n                                    maxWidth={190}\n                                  >\n                                    {withOutRatingCount && (\n                                      <Box className=\"mr-10\">\n                                        <TextField\n                                          size=\"small\"\n                                          disabled={afterStartEvent || view}\n                                          className={`${classesTextFields.numberRemoveArrowUpDown}`}\n                                          type=\"number\"\n                                          placeholder=\"0\"\n                                          value={itemQuestion.coefficient}\n                                          InputProps={{inputProps: {min: 0, max: 10}}}\n                                          error={\n                                            itemQuestion.coefficient\n                                              ? Number(itemQuestion.coefficient) > 10 ||\n                                                Number(itemQuestion.coefficient) < 0\n                                              : false\n                                          }\n                                          onChange={(e) =>\n                                            updateRating(item.id, itemQuestion.id, e.target.value)\n                                          }\n                                        />\n                                      </Box>\n                                    )}\n                                    <Button\n                                      disabled={afterStartEvent || view}\n                                      onClick={() => handleDeleteQuestionGroup(itemQuestion.id)}\n                                    >\n                                      <DeleteIcon />\n                                    </Button>\n                                    {!itemQuestion.isEdit ? (\n                                      <Button\n                                        disabled={afterStartEvent || view}\n                                        className=\"cursor-pointer width-20\"\n                                        onClick={() =>\n                                          handleEditTitle(\n                                            item.id,\n                                            itemQuestion.id,\n                                            itemQuestion.isEdit,\n                                          )\n                                        }\n                                      >\n                                        <EditIcon />\n                                      </Button>\n                                    ) : (\n                                      <Button\n                                        disabled={afterStartEvent || view}\n                                        className=\"cursor-pointer width-20\"\n                                        onClick={() =>\n                                          !errorUpdateQuestion &&\n                                          handleEditTitle(\n                                            item.id,\n                                            itemQuestion.id,\n                                            itemQuestion.isEdit,\n                                          )\n                                        }\n                                      >\n                                        <CheckCircleOutlineIcon />\n                                      </Button>\n                                    )}\n                                  </Box>\n                                </Box>\n                              </Box>\n                            )\n                          }\n                          return null\n                        })}\n                      </FormGroup>\n                    </Box>\n                  </Box>\n                ),\n            )\n          )}\n          <Box key={4} className=\"choose-evaluation-criteria-column mt-14\">\n            <Box className=\"choose-evaluation-criteria\">\n              <FormGroup className=\"choose-evaluation-criteria-group align-center\">\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      color=\"default\"\n                      onClick={() => !view && handleCheckedCustomNodes()}\n                      className={`${classes.checkboxColor}`}\n                      checked={allCheckedFeedbacks}\n                    />\n                  }\n                  label={\n                    <Box className=\"font-size-16 font-weight-500 line-height-22 color-dark-blue\">\n                      Custom Notes\n                    </Box>\n                  }\n                />\n              </FormGroup>\n              <FormGroup className=\"choose-evaluation-criteria-group-checkboxes\">\n                {customNotesQuestion.map((itemQuestion) => (\n                  <FormControlLabel\n                    key={itemQuestion.id}\n                    control={\n                      <Checkbox\n                        defaultChecked\n                        color=\"default\"\n                        onClick={() => !view && handleChangeChecked(itemQuestion.id)}\n                        checked={itemQuestion.checked}\n                        className={`${classes.checkboxColor}`}\n                      />\n                    }\n                    label={<Box className=\"checkboxLabel\">{itemQuestion.questionName}</Box>}\n                  />\n                ))}\n              </FormGroup>\n            </Box>\n          </Box>\n        </Box>\n        <AddNewGroupQuestionModal\n          openModal={openQuestionGroupModal}\n          closeModal={handleCloseAddGroupModal}\n          handleSaveDetailsProps={handleAddGroupQuestion}\n          loading={isQuestionsLoading}\n          setLoading={setIsQuestionsLoading}\n          error={errorGroupQuestion}\n          dataProps={questionGroupTitleIsDefault}\n        />\n        <Box className=\"color-red mt-20\">{error && 'Please fill out required fields'}</Box>\n      </Box>\n    )\n  )\n}\n\nexport default Step3\n"]},"metadata":{},"sourceType":"module"}